PIs: RDD, DataFrame and SQL
Consistent resolution of column names (see Behavior Changes section)
SPARK-3947: New experimental user-defined aggregate function (UDAF) interface
SPARK-8300: DataFrame hint for broadcast joins
SPARK-8668: expr function for turning a SQL expression into a DataFrame column
SPARK-9076: Improved support for NaN values
NaN functions: isnan, nanvl
dropna/fillna also fill/drop NaN values in addition to NULL values
Equality test on NaN = NaN returns true
NaN is greater than all other values
In aggregation, NaN values go into one group
SPARK-8828: Sum function returns null when all input values are nulls
Data types
SPARK-8943: CalendarIntervalType for time intervals
SPARK-7937: Support ordering on StructType
SPARK-8866: TimestampTypeâ€™s precision is reduced to 1 microseconds (1us)
SPARK-8159: Added ~100 functions, including date/time, string, math.
SPARK-8947: Improved type coercion and error reporting in plan analysis phase (i.e. most errors should be reported in analysis time, rather than execution time)
SPARK-1855: Memory and local disk only checkpointing support
Backend Execution: DataFrame and SQL
Code generation on by default for almost all DataFrame/SQL functions
Improved aggregation execution in DataFrame/SQL
Cache friendly in-memory hash map layout
Fallback to external-sort-based aggregation when memory is exhausted
Code generation on by default for aggregations
Improved join execution in DataFrame/SQL
Prefer (external) sort-merge join over hash join in shuffle joins (for left/right outer and inner joins), i.e. join data size is now bounded by disk rather than memory
Support using (external) sort-merge join method for left/right outer joins
Support for broadcast outer join
Improved sort execution in DataFrame/SQL
Cache-friendly in-memory layout for sorting
Fallback to external sorting when data exceeds memory size
Code generated comparator for fast comparisons
Native memory management & representation
Compact binary in-memory data representation, leading to lower memory usage
Execution memory is explicitly accounted for, without relying on JVM GC, leading to less GC and more robust memory management
SPARK-8638: Improved performance & memory usage in window functions
Metrics instrumentation, reporting, and visualization
SPARK-8856: Plan visualization for DataFrame/SQL
SPARK-8735: Expose metrics for runtime memory usage in web UI
SPARK-4598: Pagination for jobs with large number of tasks in web UI
Integrations: Data Sources, Hive, Hadoop, Mesos and Cluster Management
Mesos
SPARK-6284: Support framework authentication and Mesos roles
SPARK-6287: Dynamic allocation in Mesos coarse-grained mode
SPARK-6707: User specified constraints on Mesos slave attributes
YARN
SPARK-4352: Dynamic allocation in YARN works with preferred locations
Standalone Cluster Manager
SPARK-4751: Dynamic resource allocation support
SPARK-6906: Improved Hive and metastore support
SPARK-8131: Improved Hive database support
Upgraded Hive dependency Hive 1.2
Support connecting to Hive 0.13, 0.14, 1.0/0.14.1, 1.1, 1.2 metastore
Support partition pruning pushdown into the metastore (off by default; config flag spark.sql.hive.metastorePartitionPruning)
Support persisting data in Hive compatible format in metastore
SPARK-9381: Support data partitioning for JSON data sources
SPARK-5463: Parquet improvements
Upgrade to Parquet 1.7
Speedup metadata discovery and schema merging
Predicate pushdown on by default
SPARK-6774: Support for reading non-standard legacy Parquet files generated by various libraries/systems by fully implementing all backwards-compatibility rules defined in parquet-format spec
SPARK-4176: Support for writing decimal values with precision greater than 18
ORC improvements (various bug fixes)
SPARK-8890: Faster and more robust dynamic partition insert
SPARK-9486: DataSourceRegister interface for external data sources to specify short names